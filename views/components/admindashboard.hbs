<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel - BookHub</title>
    <style>
body.admin-dashboard-body {
    font-family: 'Inter', 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol';
    margin: 0;
    padding: 0;
    background-color: #f0f2f5; /* Light grey background */
    color: #333;
    display: flex;
    min-height: 100vh;
}

.admin-container {
    display: flex;
    width: 100%;
    box-shadow: 0 5px 20px rgba(0, 0, 0, 0.1);
    border-radius: 10px;
    overflow: hidden;
    margin: 20px;
}

/* Sidebar Styling */
.admin-sidebar {
    width: 250px;
    background-color: #2c3e50; /* Darker navy for sidebar */
    color: white;
    padding: 2em 0;
    flex-shrink: 0;
    box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
}

.sidebar-header {
    text-align: center;
    margin-bottom: 2em;
    padding: 0 1.5em;
    position: relative; /* For hamburger positioning */
}

.app-logo {
    font-size: 1.6em;
    font-weight: 700;
    margin-bottom: 0.5em;
    color: #ecf0f1;
}

.app-logo i {
    margin-right: 0.5em;
    color: #3498db; /* Accent blue */
}

.admin-name {
    font-size: 0.9em;
    opacity: 0.8;
}

/* Hamburger Menu */
.hamburger-menu {
    display: none; /* Hidden by default on large screens */
    background: none;
    border: none;
    color: white;
    font-size: 1.5em;
    cursor: pointer;
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    z-index: 100; /* Ensure it's above other elements */
}

.sidebar-nav ul.nav-list {
    list-style: none;
    padding: 0;
    margin: 0;
}

.sidebar-nav ul.nav-list li.nav-item {
    margin-bottom: 5px;
}

.sidebar-nav ul.nav-list li.nav-item a,
.sidebar-nav ul.nav-list li.nav-item button.logout-button {
    display: flex;
    align-items: center;
    color: white;
    text-decoration: none;
    padding: 1em 1.5em;
    background-color: transparent;
    border: none;
    width: 100%; /* For buttons */
    text-align: left; /* For buttons */
    cursor: pointer;
    transition: background-color 0.3s ease, color 0.3s ease;
}

.sidebar-nav ul.nav-list li.nav-item a i,
.sidebar-nav ul.nav-list li.nav-item button.logout-button i {
    margin-right: 1em;
    font-size: 1.1em;
}

.sidebar-nav ul.nav-list li.nav-item a:hover,
.sidebar-nav ul.nav-list li.nav-item button.logout-button:hover {
    background-color: #34495e; /* Slightly lighter navy on hover */
    color: #ecf0f1;
}

.sidebar-nav ul.nav-list li.nav-item.active a {
    background-color: #3498db; /* Active item accent */
    color: white;
    font-weight: 600;
    border-left: 5px solid #2980b9;
}

/* Main Content Area */
.admin-main-content {
    flex-grow: 1;
    background-color: #ffffff;
    padding: 2em;
    overflow-y: auto; /* Allow scrolling for content */
}

.main-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2em;
    padding-bottom: 1em;
    border-bottom: 1px solid #eee;
}

.main-title {
    margin: 0;
    font-size: 1.8em;
    color: #2c3e50;
    display: flex; /* For icon */
    align-items: center;
}
.main-title i {
    margin-right: 10px;
    color: #3498db;
}

.header-actions {
    display: flex;
    gap: 10px;
}

/* Action Buttons */
.action-button {
    border: none;
    padding: 0.8em 1.5em;
    border-radius: 6px;
    cursor: pointer;
    font-size: 0.95em;
    font-weight: 600;
    transition: background-color 0.3s ease, transform 0.2s ease, box-shadow 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.action-button i {
    margin-right: 0.5em;
}

.primary-btn {
    background-color: #28a745; /* Green for primary actions */
    color: white;
}

.primary-btn:hover {
    background-color: #218838;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(40, 167, 69, 0.2);
}

.secondary-btn {
    background-color: #6c757d; /* Grey for secondary actions */
    color: white;
}

.secondary-btn:hover {
    background-color: #5a6268;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.2);
}

/* Section Styling */
.admin-section {
    display: none; /* Hidden by default, JS will show active one */
    animation: fadeIn 0.5s ease-out;
}

.admin-section.active {
    display: block;
}

.card {
    background-color: white;
    padding: 1.5em;
    border-radius: 8px;
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.05);
    margin-bottom: 1.5em;
}

.card-title {
    color: #333;
    font-size: 1.3em;
    margin-top: 0;
    margin-bottom: 1em;
    border-bottom: 1px solid #eee;
    padding-bottom: 0.5em;
    display: flex;
    align-items: center;
}

.card-title i {
    margin-right: 0.8em;
    color: #3498db;
}

.card-subtitle {
    color: #444;
    font-size: 1.1em;
    margin-bottom: 0.8em;
}

/* Stats Grid (Overview) */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 20px;
    margin-bottom: 2em;
}

.stat-card {
    background-color: #f8f9fa;
    border: 1px solid #e9ecef;
    border-radius: 8px;
    padding: 1.5em;
    text-align: center;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    transition: transform 0.2s ease-in-out;
}

.stat-card:hover {
    transform: translateY(-3px);
}

.stat-card .icon-large {
    font-size: 2.5em;
    color: #3498db; /* Default icon color */
    margin-bottom: 0.5em;
}
.stat-card.pending .icon-large {
    color: #f39c12; /* Orange for pending */
}


.stat-value {
    display: block;
    font-size: 2.2em;
    font-weight: 700;
    color: #2c3e50;
    margin-bottom: 0.1em;
}

.stat-label {
    font-size: 0.9em;
    color: #777;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

/* Table Styling */
.table-actions {
    display: flex;
    gap: 10px;
    margin-bottom: 1.5em;
    flex-wrap: wrap;
    align-items: center;
}

.table-actions input,
.table-actions select {
    padding: 0.6em 1em;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 0.9em;
    min-width: 150px;
}

.table-container {
    overflow-x: auto; /* Enable horizontal scrolling for tables */
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.03);
}

.data-table {
    width: 100%;
    border-collapse: collapse;
    background-color: white;
}

.data-table th,
.data-table td {
    padding: 1em 1.2em;
    text-align: left;
    border-bottom: 1px solid #eee;
}

.data-table th {
    background-color: #f2f2f2;
    font-weight: 600;
    color: #555;
    text-transform: uppercase;
    font-size: 0.85em;
}

.data-table tbody tr:hover {
    background-color: #f5f5f5;
}

.data-table .status-active { color: #28a745; font-weight: 600; } /* Green */
.data-table .status-pending { color: #f39c12; font-weight: 600; } /* Orange */
.data-table .status-banned { color: #dc3545; font-weight: 600; } /* Red */
.data-table .status-sold { color: #6c757d; font-weight: 600; } /* Grey */
.data-table .status-deactivated { color: #888; font-weight: 600; } /* Darker grey */

.data-table .action-buttons-group {
    display: flex;
    gap: 5px;
}

.data-table .action-buttons-group button {
    background: none;
    border: 1px solid #ccc;
    padding: 0.5em 0.8em;
    border-radius: 4px;
    cursor: pointer;
    font-size: 0.8em;
    color: #555;
    transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
}

.data-table .action-buttons-group button:hover {
    background-color: #e9ecef;
    border-color: #a0a0a0;
}

.data-table .action-buttons-group button.btn-danger {
    color: #dc3545;
    border-color: #dc3545;
}
.data-table .action-buttons-group button.btn-danger:hover {
    background-color: #dc3545;
    color: white;
}

/* Form Groups (General) */
.form-group {
    margin-bottom: 1em;
}
.form-group label {
    display: block;
    margin-bottom: 0.5em;
    font-weight: 600;
    color: #555;
}
.form-group input[type="text"],
.form-group input[type="number"],
.form-group input[type="email"],
.form-group textarea {
    width: 100%;
    padding: 0.8em 1em;
    border: 1px solid #ddd;
    border-radius: 6px;
    font-size: 1em;
    box-sizing: border-box;
}

/* Activity Feed (Tasks) */
.activity-feed {
    list-style: none;
    padding: 0;
    margin: 0;
}

.activity-feed li {
    padding: 0.8em 0;
    border-bottom: 1px solid #eee;
    color: #555;
    display: flex;
    align-items: center;
    cursor: pointer; /* For clickable tasks */
}
.activity-feed li.task-item {
    justify-content: space-between; /* Space out text and action buttons */
    gap: 10px;
}

.activity-feed li:last-child {
    border-bottom: none;
}

.activity-feed li i {
    margin-right: 0.8em;
    color: #888;
    font-size: 0.9em;
    flex-shrink: 0;
    padding-top: 3px;
}

.activity-feed li .task-text {
    flex-grow: 1;
}

.activity-feed li .task-actions button {
    background: none;
    border: none;
    color: #888;
    font-size: 0.9em;
    cursor: pointer;
    margin-left: 5px;
    transition: color 0.2s ease;
}
.activity-feed li .task-actions button:hover {
    color: #333;
}
.activity-feed li .task-actions button.complete-task:hover {
    color: #28a745;
}
.activity-feed li .task-actions button.delete-task:hover {
    color: #dc3545;
}

.activity-feed.completed-tasks li {
    text-decoration: line-through;
    color: #a0a0a0;
}
/* Removed display: none for task-actions for completed tasks */


/* Empty States */
.empty-state {
    text-align: center;
    color: #888;
    font-style: italic;
    padding: 2em;
    border: 1px dashed #e0e0e0;
    border-radius: 8px;
    margin: 1em 0;
}
.empty-table-row td {
    text-align: center;
    color: #888;
    font-style: italic;
    padding: 2em;
}

/* Search Results List Specific Styling */
.search-results ul {
    list-style: none;
    padding: 0;
    margin: 0;
}
.search-results li {
    padding: 0.8em 0;
    border-bottom: 1px solid #eee;
    color: #555;
}
.search-results li:last-child {
    border-bottom: none;
}

/* Utilities */
.mt-20 { margin-top: 20px; }

/* Animations */
@keyframes fadeIn {
    from { opacity: 0; transform: translateY(10px); }
    to { opacity: 1; transform: translateY(0); }
}

/* Responsive Adjustments */
@media (max-width: 992px) {
    .admin-container {
        flex-direction: column;
        margin: 0;
        border-radius: 0;
        box-shadow: none;
    }
    .admin-sidebar {
        width: 100%;
        padding: 1em 0;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        position: relative; /* Ensure it lays out correctly */
    }
    .sidebar-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0 1.5em;
        margin-bottom: 0; /* No margin as nav is toggled */
        min-height: 50px; /* Ensure header has some height */
    }
    .app-logo { margin-bottom: 0; }
    .hamburger-menu { display: block; } /* Show hamburger on small screens */

    .sidebar-nav {
        max-height: 0; /* Hidden by default */
        overflow: hidden;
        transition: max-height 0.3s ease-in-out;
    }
    .sidebar-nav.active {
        max-height: 500px; /* Sufficient height to show all items */
        padding-top: 1em; /* Add some padding when active */
    }

    .sidebar-nav ul.nav-list {
        flex-direction: column; /* Stack nav items vertically in dropdown */
        padding: 0 1.5em;
    }
    .sidebar-nav ul.nav-list li.nav-item {
        margin-bottom: 5px;
        margin-right: 0;
    }
    .sidebar-nav ul.nav-list li.nav-item a,
    .sidebar-nav ul.nav-list li.nav-item button.logout-button {
        justify-content: flex-start;
        border-left: none !important; /* Remove left border for active */
        border-bottom: 3px solid transparent; /* Placeholder for active bottom border */
    }
    .sidebar-nav ul.nav-list li.nav-item.active a {
        background-color: #34495e; /* Active background on small screen */
        border-bottom-color: #2980b9; /* Active bottom border */
    }

    .admin-main-content {
        padding: 1.5em;
    }
    .main-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 1em;
        margin-bottom: 1.5em;
    }
    .table-actions {
        flex-direction: column;
        align-items: flex-start;
    }
    .table-actions input,
    .table-actions select,
    .table-actions button {
        width: 100%;
        margin-bottom: 10px;
    }
    .action-button {
        width: 100%;
    }
}

@media (max-width: 480px) {
    .admin-main-content {
        padding: 1em;
    }
    .main-title {
        font-size: 1.5em;
    }
    .data-table th, .data-table td {
        padding: 0.8em;
        font-size: 0.8em;
    }
}
    </style>
</head>
<body class="admin-dashboard-body">
    <div class="admin-container">
        <aside class="admin-sidebar">
            <div class="sidebar-header">
                <h2 class="app-logo"><i class="fas fa-tools"></i> Admin Panel</h2>
                <span class="admin-name" id="admin-name-sidebar">Admin User</span>
                <button class="hamburger-menu" id="hamburger-menu">
                    <i class="fas fa-bars"></i>
                </button>
            </div>
            <nav class="sidebar-nav" id="sidebar-nav">
                <ul class="nav-list">
                    <li class="nav-item active" data-section="overview"><a href="#"><i class="fas fa-tachometer-alt"></i> Dashboard Overview</a></li>
                    <li class="nav-item" data-section="user-management"><a href="#"><i class="fas fa-users"></i> User Management</a></li>
                    <li class="nav-item" data-section="book-listings"><a href="#"><i class="fas fa-book-open"></i> Book Listings</a></li>
                    <li class="nav-item" data-section="search-books"><a href="#"><i class="fas fa-search"></i> Search Books</a></li>
                    <li class="nav-item" data-section="admin-task-list"><a href="#"><i class="fas fa-tasks"></i> Admin Task List</a></li>
                    <li class="nav-item"><button id="admin-logout-btn" class="logout-button"><i class="fas fa-sign-out-alt"></i> Logout</button></li>
                </ul>
            </nav>
        </aside>

        <main class="admin-main-content">
            <header class="main-header">
                <h1 class="main-title" id="current-section-title"><i class="fas fa-tachometer-alt"></i> Dashboard Overview</h1>
                <div class="header-actions">
                    <button class="action-button primary-btn"><i class="fas fa-plus"></i> Quick Task</button>
                </div>
            </header>

            <section id="overview" class="admin-section active">
                <div class="stats-grid">
                    <div class="stat-card">
                        <i class="fas fa-users icon-large"></i>
                        <span class="stat-value" id="total-users">0</span>
                        <span class="stat-label">Total Users</span>
                    </div>
                    <div class="stat-card">
                        <i class="fas fa-book icon-large"></i>
                        <span class="stat-value" id="total-books">0</span>
                        <span class="stat-label">Total Books Listed</span>
                    </div>
                    <div class="stat-card">
                        <i class="fas fa-chart-line icon-large"></i>
                        <span class="stat-value" id="total-sales">ZMW 0.00</span>
                        <span class="stat-label">Total Sales Volume</span>
                    </div>
                    <div class="stat-card pending">
                        <i class="fas fa-hourglass-half icon-large"></i>
                        <span class="stat-value" id="pending-listings">0</span>
                        <span class="stat-label">Pending Listings</span>
                    </div>
                </div>

                <div class="card recent-activity-card">
                    <h3 class="card-title"><i class="fas fa-history"></i> Recent Admin Actions</h3>
                    <ul id="admin-activity-list" class="activity-feed">
                        <li class="empty-state">No recent admin actions.</li>
                    </ul>
                </div>
            </section>

            <section id="user-management" class="admin-section">
                <h3 class="card-title"><i class="fas fa-users"></i> All Users</h3>
                <div class="table-actions">
                    <input type="text" id="user-search" placeholder="Search users...">
                    <button class="action-button secondary-btn"><i class="fas fa-filter"></i> Filter</button>
                    <button class="action-button primary-btn"><i class="fas fa-user-plus"></i> Add New User</button>
                </div>
                <div class="table-container">
                    <table class="data-table" id="user-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Email</th>
                                <th>Status</th>
                                <th>Role</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="empty-table-row"><td colspan="6">Loading user data...</td></tr>
                        </tbody>
                    </table>
                </div>
            </section>

            <section id="book-listings" class="admin-section">
                <h3 class="card-title"><i class="fas fa-book-open"></i> Manage Book Listings</h3>
                <div class="table-actions">
                    <input type="text" id="book-listing-search" placeholder="Search books...">
                    <select id="book-listing-status-filter">
                        <option value="">All Statuses</option>
                        <option value="pending">Pending</option>
                        <option value="active">Active</option>
                        <option value="sold">Sold</option>
                        <option value="deactivated">Deactivated</option>
                    </select>
                    <button class="action-button secondary-btn"><i class="fas fa-filter"></i> Filter</button>
                </div>
                <div class="table-container">
                    <table class="data-table" id="book-listing-table">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Title</th>
                                <th>Author</th>
                                <th>Seller</th>
                                <th>Price</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr class="empty-table-row"><td colspan="7">Loading book data...</td></tr>
                        </tbody>
                    </table>
                </div>
            </section>

            <section id="search-books" class="admin-section">
                <h3 class="card-title"><i class="fas fa-search"></i> Global Book Search</h3>
                <div class="card search-box">
                    <p>Enter keywords to search across all book listings on BookHub.</p>
                    <div class="form-group">
                        <label for="global-book-search-input">Search Term:</label>
                        <input type="text" id="global-book-search-input" placeholder="e.g., 'Lusaka', 'history', 'fiction'">
                    </div>
                    <button class="action-button primary-btn" id="perform-book-search"><i class="fas fa-search"></i> Search Books</button>
                </div>
                <div class="card search-results mt-20">
                    <h4 class="card-subtitle">Search Results</h4>
                    <div id="global-search-results">
                        <p class="empty-state">Your search results will appear here.</p>
                    </div>
                </div>
            </section>

            <section id="admin-task-list" class="admin-section">
                <h3 class="card-title"><i class="fas fa-tasks"></i> Your Admin Tasks</h3>
                <div class="card task-input-area">
                    <div class="form-group">
                        <label for="new-task-input">Add New Task:</label>
                        <input type="text" id="new-task-input" placeholder="e.g., Review pending listings, Check user reports">
                    </div>
                    <button class="action-button primary-btn" id="add-task-btn"><i class="fas fa-plus-circle"></i> Add Task</button>
                </div>
                <div class="card task-list-container mt-20">
                    <h4 class="card-subtitle">Pending Tasks</h4>
                    <ul id="task-list" class="activity-feed">
                        <li class="empty-state">No pending tasks. Great job!</li>
                    </ul>
                    <h4 class="card-subtitle mt-20">Completed Tasks</h4>
                    <ul id="completed-task-list" class="activity-feed completed-tasks">
                        <li class="empty-state">No completed tasks yet.</li>
                    </ul>
                </div>
            </section>

        </main>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
    // --- DOM Element References ---
    const adminNameSidebar = document.getElementById('admin-name-sidebar');
    const currentSectionTitle = document.getElementById('current-section-title');
    const navItems = document.querySelectorAll('.sidebar-nav .nav-item');
    const adminSections = document.querySelectorAll('.admin-section');
    const adminLogoutBtn = document.getElementById('admin-logout-btn');
    const hamburgerMenu = document.getElementById('hamburger-menu');
    const sidebarNav = document.getElementById('sidebar-nav');

    // Overview Stats
    const totalUsersSpan = document.getElementById('total-users');
    const totalBooksSpan = document.getElementById('total-books');
    const totalSalesSpan = document.getElementById('total-sales');
    const pendingListingsSpan = document.getElementById('pending-listings');
    const adminActivityList = document.getElementById('admin-activity-list');

    // User Management
    const userTableBody = document.querySelector('#user-table tbody');
    const userSearchInput = document.getElementById('user-search');

    // Book Listings
    const bookListingTableBody = document.querySelector('#book-listing-table tbody');
    const bookListingSearchInput = document.getElementById('book-listing-search');
    const bookListingStatusFilter = document.getElementById('book-listing-status-filter');

    // Admin Task List
    const newTaskInput = document.getElementById('new-task-input');
    const addTaskBtn = document.getElementById('add-task-btn');
    const taskList = document.getElementById('task-list');
    const completedTaskList = document.getElementById('completed-task-list');


    // --- Dummy Admin Data (Updated) ---
    let adminData = {
        name: "AdminSlot #1",
        overview: { // Reinstated overview data
            totalUsers: 1250,
            totalBooks: 4500,
            totalSalesVolume: 125300.50, // ZMW
            pendingListings: 15,
            recentActions: [
                { icon: "fas fa-user-check", text: "Approved user 'ChisangaM' account." },
                { icon: "fas fa-check-circle", text: "Approved 'The Zambezi Explorer' book listing." },
                { icon: "fas fa-ban", text: "Temporarily suspended 'NdekeBooks' for policy violation." },
                { icon: "fas fa-chart-line", text: "Generated weekly sales report." },
                { icon: "fas fa-edit", text: "Updated 'Admin Guidelines' document." }
            ]
        },
        users: [
            { id: 'USR001', name: 'Fred Banda', email: 'fredb@example.com', status: 'active', role: 'user' },
            { id: 'USR002', name: 'Chisanga Phiri', email: 'chisanga@example.com', status: 'active', role: 'user' },
            { id: 'USR003', name: 'NdekeBooks', email: 'ndekeb@example.com', status: 'banned', role: 'seller' },
            { id: 'USR004', name: 'Grace Mwanza', email: 'grace@example.com', status: 'pending', role: 'user' },
            { id: 'USR005', name: 'KopalaReads', email: 'kopala@example.com', status: 'active', role: 'seller' }
        ],
        books: [
            { id: 'BOK001', title: 'The Shadow of the Sun', author: 'Chimamanda Ngozi Adichie', seller: 'Fred Banda', price: 180.00, status: 'active', cover: 'https://images.unsplash.com/photo-1550399105-c49987483754?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NjcwOTR8MHwxfHNlYXJjaHw3OXx8Ym9vayUyMGNvdmVyfGVufDB8fHx8MTcwNDkxMzU0M3ww&ixlib=rb-4.0.3&q=80&w=400' },
            { id: 'BOK002', title: 'A History of Zambia', author: 'Andrew Roberts', seller: 'NdekeBooks', price: 350.00, status: 'pending', cover: 'https://images.unsplash.com/photo-1544947953-cd147690f0c0?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NjcwOTR8MHwxfHNlYXJjaHw1OXx8Ym9vayUyMGNvdmVyfGVufDB8fHx8MTcwNDkxMzUyNXww&ixlib=rb-4.0.3&q=80&w=400' },
            { id: 'BOK003', title: 'Cry, The Beloved Country', author: 'Alan Paton', seller: 'Chisanga Phiri', price: 120.00, status: 'active', cover: 'https://images.unsplash.com/photo-1593340578631-50e82c5a242c?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NjcwOTR8MHwxfHNlYXJjaHw0OXx8Ym9vayUyMGNvdmVyfGVufDB8fHx8MTcwNDkxMzUyNXww&ixlib=rb-4.0.3&q=80&w=400' },
            { id: 'BOK004', title: 'Local Fables of Lusaka', author: 'Various Zambian Authors', seller: 'KopalaReads', price: 90.00, status: 'sold', cover: 'https://images.unsplash.com/photo-1546933939-959c90967d64?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w1NjcwOTR8MHwxfHNlYXJjaHw4Mnx8Ym9vayUyMGNvdmVyfGVufDB8fHx8MTcwNDkxMzU0M3ww&ixlib=rb-4.0.3&q=80&w=400' }
        ],
        adminTasks: [
            { id: 1, text: "Review pending user registrations", completed: false },
            { id: 2, text: "Check book listing image quality", completed: false },
            { id: 3, text: "Respond to seller inquiries", completed: false },
            { id: 4, text: "Update privacy policy (completed)", completed: true }
        ]
    };

    // --- Population Functions ---
    function populateOverview() {
        if (totalUsersSpan) totalUsersSpan.textContent = adminData.overview.totalUsers.toLocaleString();
        if (totalBooksSpan) totalBooksSpan.textContent = adminData.overview.totalBooks.toLocaleString();
        if (totalSalesSpan) totalSalesSpan.textContent = `ZMW ${adminData.overview.totalSalesVolume.toFixed(2).toLocaleString()}`;
        if (pendingListingsSpan) pendingListingsSpan.textContent = adminData.overview.pendingListings;

        if (adminActivityList) {
            adminActivityList.innerHTML = '';
            if (adminData.overview.recentActions.length > 0) {
                adminData.overview.recentActions.forEach(action => {
                    const li = document.createElement('li');
                    li.innerHTML = `<i class="${action.icon}"></i> ${action.text}`;
                    adminActivityList.appendChild(li);
                });
            } else {
                adminActivityList.innerHTML = '<li class="empty-state">No recent admin actions.</li>';
            }
        }
    }

    function populateUsersTable(users = adminData.users) {
        if (userTableBody) {
            userTableBody.innerHTML = '';
            if (users.length > 0) {
                users.forEach(user => {
                    const row = userTableBody.insertRow();
                    row.innerHTML = `
                        <td>${user.id}</td>
                        <td>${user.name}</td>
                        <td>${user.email}</td>
                        <td class="status-${user.status}">${user.status.charAt(0).toUpperCase() + user.status.slice(1)}</td>
                        <td>${user.role.charAt(0).toUpperCase() + user.role.slice(1)}</td>
                        <td>
                            <div class="action-buttons-group">
                                <button onclick="viewUserDetails('${user.id}')"><i class="fas fa-eye"></i> View</button>
                                <button onclick="toggleUserStatus('${user.id}', '${user.status}')" class="${user.status === 'active' ? 'btn-danger' : ''}">${user.status === 'active' ? '<i class="fas fa-ban"></i> Ban' : '<i class="fas fa-check-circle"></i> Activate'}</button>
                                <button onclick="deleteUser('${user.id}')" class="btn-danger"><i class="fas fa-trash"></i> Delete</button>
                            </div>
                        </td>
                    `;
                });
            } else {
                userTableBody.innerHTML = '<tr class="empty-table-row"><td colspan="6">No users found.</td></tr>';
            }
        }
    }

    function populateBookListingsTable(books = adminData.books) {
        if (bookListingTableBody) {
            bookListingTableBody.innerHTML = '';
            if (books.length > 0) {
                books.forEach(book => {
                    const row = bookListingTableBody.insertRow();
                    row.innerHTML = `
                        <td>${book.id}</td>
                        <td>${book.title}</td>
                        <td>${book.author}</td>
                        <td>${book.seller}</td>
                        <td>ZMW ${book.price.toFixed(2)}</td>
                        <td class="status-${book.status}">${book.status.charAt(0).toUpperCase() + book.status.slice(1)}</td>
                        <td>
                            <div class="action-buttons-group">
                                <button onclick="viewBookDetails('${book.id}')"><i class="fas fa-eye"></i> View</button>
                                <button onclick="toggleBookStatus('${book.id}', '${book.status}')">
                                    ${book.status === 'pending' ? '<i class="fas fa-check"></i> Approve' : (book.status === 'active' ? '<i class="fas fa-times-circle"></i> Deactivate' : '<i class="fas fa-sync-alt"></i> Re-list')}
                                </button>
                                <button onclick="deleteBook('${book.id}')" class="btn-danger"><i class="fas fa-trash"></i> Delete</button>
                            </div>
                        </td>
                    `;
                });
            } else {
                bookListingTableBody.innerHTML = '<tr class="empty-table-row"><td colspan="7">No books found.</td></tr>';
            }
        }
    }

    function populateAdminTasks() {
        if (taskList && completedTaskList) {
            taskList.innerHTML = '';
            completedTaskList.innerHTML = '';
            let pendingCount = 0;
            let completedCount = 0;

            adminData.adminTasks.forEach(task => {
                const li = document.createElement('li');
                li.classList.add('task-item');
                li.setAttribute('data-task-id', task.id);
                li.innerHTML = `
                    <span class="task-text">${task.text}</span>
                    <div class="task-actions">
                        ${!task.completed ? `<button class="complete-task" title="Mark as Complete"><i class="fas fa-check-circle"></i></button>` : ''}
                        <button class="delete-task" title="Delete Task"><i class="fas fa-trash-alt"></i></button> </div>
                `;

                if (task.completed) {
                    completedTaskList.appendChild(li);
                    li.classList.add('completed');
                    completedCount++;
                } else {
                    taskList.appendChild(li);
                    pendingCount++;
                }
            });

            if (pendingCount === 0) {
                taskList.innerHTML = '<li class="empty-state">No pending tasks. Great job!</li>';
            }
            if (completedCount === 0) {
                completedTaskList.innerHTML = '<li class="empty-state">No completed tasks yet.</li>';
            }
        }
    }


    // --- Navigation Logic ---
    function showSection(sectionId) {
        adminSections.forEach(section => {
            section.classList.remove('active');
        });
        document.getElementById(sectionId).classList.add('active');

        navItems.forEach(item => {
            item.classList.remove('active');
        });
        const activeNavItem = document.querySelector(`.nav-item[data-section="${sectionId}"]`);
        activeNavItem.classList.add('active');

        // Update main title with icon
        const navText = activeNavItem.querySelector('a').textContent;
        const iconElement = activeNavItem.querySelector('a i').cloneNode(true); // Clone icon
        currentSectionTitle.innerHTML = ''; // Clear existing content
        currentSectionTitle.appendChild(iconElement); // Add icon
        currentSectionTitle.append(navText); // Add text

        // Hide sidebar nav on small screens after selection
        if (window.innerWidth <= 992) {
            sidebarNav.classList.remove('active');
        }
    }

    // --- Admin Action Functions (Dummy Implementations) ---
    window.viewUserDetails = (userId) => {
        alert(`Viewing details for user: ${userId}`);
    };

    window.toggleUserStatus = (userId, currentStatus) => {
        const newStatus = currentStatus === 'active' ? 'banned' : 'active';
        if (confirm(`Are you sure you want to change status for ${userId} to ${newStatus}?`)) {
            const userIndex = adminData.users.findIndex(u => u.id === userId);
            if (userIndex !== -1) {
                adminData.users[userIndex].status = newStatus;
                populateUsersTable();
                alert(`User ${userId} status changed to ${newStatus}.`);
            }
        }
    };

    window.deleteUser = (userId) => {
        if (confirm(`Are you sure you want to PERMANENTLY delete user: ${userId}? This action cannot be undone.`)) {
            adminData.users = adminData.users.filter(u => u.id !== userId);
            populateUsersTable();
            alert(`User ${userId} deleted.`);
        }
    };

    window.viewBookDetails = (bookId) => {
        alert(`Viewing details for book: ${bookId}`);
    };

    window.toggleBookStatus = (bookId, currentStatus) => {
        let newStatus;
        if (currentStatus === 'pending') {
            newStatus = 'active';
        } else if (currentStatus === 'active') {
            newStatus = 'deactivated';
        } else { // 'sold' or 'deactivated'
            newStatus = 'active'; // Re-list
        }

        if (confirm(`Are you sure you want to change status for book ${bookId} to ${newStatus}?`)) {
            const bookIndex = adminData.books.findIndex(b => b.id === bookId);
            if (bookIndex !== -1) {
                adminData.books[bookIndex].status = newStatus;
                populateBookListingsTable();
                alert(`Book ${bookId} status changed to ${newStatus}.`);
            }
        }
    };

    window.deleteBook = (bookId) => {
        if (confirm(`Are you sure you want to PERMANENTLY delete book: ${bookId}? This action cannot be undone.`)) {
            adminData.books = adminData.books.filter(b => b.id !== bookId);
            populateBookListingsTable();
            alert(`Book ${bookId} deleted.`);
        }
    };

    // --- Admin Task List Actions ---
    addTaskBtn.addEventListener('click', () => {
        const taskText = newTaskInput.value.trim();
        if (taskText) {
            const newId = adminData.adminTasks.length ? Math.max(...adminData.adminTasks.map(t => t.id)) + 1 : 1;
            adminData.adminTasks.push({ id: newId, text: taskText, completed: false });
            newTaskInput.value = '';
            populateAdminTasks();
        } else {
            alert('Please enter a task.');
        }
    });

    // Event delegation for task list actions (complete and delete)
    taskList.addEventListener('click', handleTaskActions);
    completedTaskList.addEventListener('click', handleTaskActions);

    function handleTaskActions(e) {
        const target = e.target;
        const listItem = target.closest('.task-item');
        if (!listItem) return;

        const taskId = parseInt(listItem.dataset.taskId);
        const taskIndex = adminData.adminTasks.findIndex(t => t.id === taskId);

        if (taskIndex === -1) return;

        if (target.closest('.complete-task')) {
            adminData.adminTasks[taskIndex].completed = true;
            populateAdminTasks();
        } else if (target.closest('.delete-task')) {
            const confirmationMessage = adminData.adminTasks[taskIndex].completed ?
                'Are you sure you want to delete this completed task?' :
                'Are you sure you want to delete this pending task?';
            if (confirm(confirmationMessage)) {
                adminData.adminTasks = adminData.adminTasks.filter(t => t.id !== taskId);
                populateAdminTasks();
            }
        }
    }

    // --- Search & Filter (Client-side dummy for demonstration) ---
    userSearchInput.addEventListener('keyup', () => {
        const searchTerm = userSearchInput.value.toLowerCase();
        const filteredUsers = adminData.users.filter(user =>
            user.name.toLowerCase().includes(searchTerm) ||
            user.email.toLowerCase().includes(searchTerm) ||
            user.id.toLowerCase().includes(searchTerm)
        );
        populateUsersTable(filteredUsers);
    });

    bookListingSearchInput.addEventListener('keyup', filterBookListings);
    bookListingStatusFilter.addEventListener('change', filterBookListings);

    function filterBookListings() {
        const searchTerm = bookListingSearchInput.value.toLowerCase();
        const statusFilter = bookListingStatusFilter.value;

        let filteredBooks = adminData.books.filter(book =>
            book.title.toLowerCase().includes(searchTerm) ||
            book.author.toLowerCase().includes(searchTerm) ||
            book.seller.toLowerCase().includes(searchTerm) ||
            book.id.toLowerCase().includes(searchTerm)
        );

        if (statusFilter) {
            filteredBooks = filteredBooks.filter(book => book.status === statusFilter);
        }
        populateBookListingsTable(filteredBooks);
    }

    // Global Book Search section: results as a list
    document.getElementById('perform-book-search').addEventListener('click', () => {
        const searchTerm = document.getElementById('global-book-search-input').value.trim();
        const searchResultsDiv = document.getElementById('global-search-results');
        if (searchTerm) {
            searchResultsDiv.innerHTML = `<p>Searching for books with "${searchTerm}"...</p>`;
            setTimeout(() => {
                const results = adminData.books.filter(book =>
                    book.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    book.author.toLowerCase().includes(searchTerm.toLowerCase()) ||
                    book.seller.toLowerCase().includes(searchTerm.toLowerCase())
                );
                if (results.length > 0) {
                    let html = '<ul>';
                    results.forEach(book => {
                        html += `<li><strong>${book.title}</strong> by ${book.author} (Seller: ${book.seller}) - Price: ZMW ${book.price.toFixed(2)} - Status: ${book.status}</li>`;
                    });
                    html += '</ul>';
                    searchResultsDiv.innerHTML = html;
                } else {
                    searchResultsDiv.innerHTML = `<p class="empty-state">No books found matching "${searchTerm}".</p>`;
                }
            }, 1000);
        } else {
            searchResultsDiv.innerHTML = '<p class="empty-state">Please enter a search term.</p>';
        }
    });


    // --- Event Listeners ---
    if (adminLogoutBtn) {
        adminLogoutBtn.addEventListener('click', () => {
            if (confirm('Are you sure you want to log out from the Admin Panel?')) {
                console.log('Admin logging out...');
                window.location.href = '/admin-login'; // Or your admin login page route
            }
        });
    }

    navItems.forEach(item => {
        item.addEventListener('click', (e) => {
            e.preventDefault();
            const sectionId = item.dataset.section;
            if (sectionId) {
                showSection(sectionId);
            }
        });
    });

    // Hamburger menu toggle
    if (hamburgerMenu) {
        hamburgerMenu.addEventListener('click', () => {
            sidebarNav.classList.toggle('active');
        });
    }

    // --- Initial Load ---
    adminNameSidebar.textContent = adminData.name;
    populateOverview(); // Re-added
    populateUsersTable();
    populateBookListingsTable();
    populateAdminTasks();
    showSection('overview'); // Show Overview by default
});
    </script>
    <script src="./js/admindashboard.js"></script>
</body>
</html>